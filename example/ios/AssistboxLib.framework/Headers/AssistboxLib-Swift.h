#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef ASSISTBOXLIB_SWIFT_H
#define ASSISTBOXLIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CallKit;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AssistboxLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class CXCallUpdate;
@class CXProvider;
@class NSUUID;

SWIFT_CLASS("_TtC12AssistboxLib14ASTCallKitUtil")
@interface ASTCallKitUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTCallKitUtil * _Nonnull shared;)
+ (ASTCallKitUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (CXCallUpdate * _Nonnull)initCXCallUpdateFromInfo:(NSString * _Nonnull)fromInfo SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (CXProvider * _Nonnull)initCXProviderWithIconName:(NSString * _Nullable)iconName SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (void)closeCallKitOnInitializeWithCxProvider:(CXProvider * _Nonnull)cxProvider callUUID:(NSUUID * _Nonnull)callUUID;
- (void)closeCallKit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AssistboxLib23ASTIncomingCallDelegate_")
@protocol ASTIncomingCallDelegate
- (void)endCallWithUuid:(NSUUID * _Nonnull)uuid reason:(CXCallEndedReason)reason;
@optional
- (void)initASTVideoCallWithAccessToken:(NSString * _Nonnull)accessToken mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint callUUID:(NSUUID * _Nonnull)callUUID SWIFT_METHOD_FAMILY(none);
- (void)initASTC2CAgentWithCallUUID:(NSUUID * _Nonnull)callUUID SWIFT_METHOD_FAMILY(none);
@required
- (void)assistboxSdkVersionNotSupportedWithCallUUID:(NSUUID * _Nonnull)callUUID;
@end

@class PKPushPayload;
@class NSNumber;

SWIFT_CLASS("_TtC12AssistboxLib22ASTIncomingCallHandler")
@interface ASTIncomingCallHandler : NSObject
/// pass the whole payload object and let Assistbox SDK parse the notification payload
- (NSDictionary<NSString *, id> * _Nullable)receivedVoIPNotificationWithPayload:(PKPushPayload * _Nonnull)payload checkForVersionSupport:(BOOL)checkForVersionSupport SWIFT_WARN_UNUSED_RESULT;
/// If the main application wants to parse the payload, it may call this method
- (NSDictionary<NSString *, id> * _Nonnull)receivedCallToParticipantWithAccessToken:(NSString * _Nonnull)accessToken mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint signalServerUrl:(NSString * _Nonnull)signalServerUrl fromInfo:(NSString * _Nonnull)fromInfo callEventId:(NSString * _Nullable)callEventId callerUUID:(NSString * _Nullable)callerUUID logLevel:(NSNumber * _Nullable)logLevel checkForVersionSupport:(BOOL)checkForVersionSupport SWIFT_WARN_UNUSED_RESULT;
/// If the main application wants to parse the payload, it may call this method
- (NSDictionary<NSString *, id> * _Nullable)receivedCallFromQueueWithQueueId:(NSInteger)queueId fromInfo:(NSString * _Nonnull)fromInfo signalServerUrl:(NSString * _Nonnull)signalServerUrl logLevel:(NSNumber * _Nullable)logLevel checkForVersionSupport:(BOOL)checkForVersionSupport SWIFT_WARN_UNUSED_RESULT;
- (void)answerCallWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)sendVersionNotSupportedSignalWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)rejectCallWithCompletion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib19ASTLaunchParameters")
@interface ASTLaunchParameters : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTLaunchParameters * _Nonnull shared;)
+ (ASTLaunchParameters * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic, copy) NSString * _Nonnull accessKey;
@property (nonatomic, copy) NSString * _Nonnull mobileServiceEndpoint;
@property (nonatomic) BOOL isNotificationBased;
@property (nonatomic) BOOL hasNavigationStack;
@property (nonatomic) BOOL isMainAppNavigationBarHidden;
@property (nonatomic) BOOL redirectToMainApplication;
@property (nonatomic, copy) NSString * _Nonnull splashScreenResourceName;
@property (nonatomic, copy) NSString * _Nonnull voipNotificationToken;
@property (nonatomic, copy) NSString * _Nonnull useModule;
@property (nonatomic, copy) NSString * _Nonnull apiKey;
@property (nonatomic, copy) NSString * _Nonnull queueCode;
@property (nonatomic) BOOL showContactForm;
@property (nonatomic, copy) NSString * _Nonnull productName;
@property (nonatomic, copy) NSString * _Nonnull language;
@property (nonatomic, copy) NSString * _Nonnull firstName;
@property (nonatomic, copy) NSString * _Nonnull lastName;
@property (nonatomic, copy) NSString * _Nonnull email;
@property (nonatomic, copy) NSString * _Nonnull phone;
@property (nonatomic, copy) NSString * _Nonnull regularNotificationToken;
- (NSString * _Nullable)getLaunchParameterWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib22ASTNotificationManager")
@interface ASTNotificationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTNotificationManager * _Nonnull shared;)
+ (ASTNotificationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)createOngoingCallNotificationWithText:(NSString * _Nonnull)text;
- (void)removeOngoingCallNotification;
- (void)createCallKitNotificationWithText:(NSString * _Nonnull)text;
- (void)removeCallKitNotification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib13ASTStringUtil")
@interface ASTStringUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTStringUtil * _Nonnull shared;)
+ (ASTStringUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key comment:(NSString * _Nonnull)comment SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRandomAlphaNumericWithLength:(NSInteger)length SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib16ASTUpdateManager")
@interface ASTUpdateManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib19ASTUserDefaultsUtil")
@interface ASTUserDefaultsUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTUserDefaultsUtil * _Nonnull shared;)
+ (ASTUserDefaultsUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AssistboxLib21AssistboxViewDelegate_")
@protocol AssistboxViewDelegate
- (void)AssistboxViewWillDisappearWithAnimated:(BOOL)animated;
@end

@class UIViewController;

SWIFT_CLASS("_TtC12AssistboxLib9Assistbox")
@interface Assistbox : NSObject <AssistboxViewDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Assistbox * _Nonnull shared;)
+ (Assistbox * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)AssistboxViewWillDisappearWithAnimated:(BOOL)animated;
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
/// APNS VoIP Notification token that will be used to send notifications to the user
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=4.4.0);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
- (void)initVideoCallWithTokenInternalWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName isNotificationBased:(BOOL)isNotificationBased regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=4.4.0);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=4.4.0);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param apiKey Your company’s Assistbox Api Key
///
/// \param queueCode The queueCode of the queue that the user will join
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param firstName First name of the client
///
/// \param lastName Last name of the client
///
/// \param email E-mail of the client
///
/// \param phone Phone number of the client
///
/// \param productName will be visible by agent
///
/// \param language preferred language that will be used by Assistbox, Will use device language if null
///
- (void)initC2CModuleAsClientWithApiKeyWithViewController:(UIViewController * _Nonnull)viewController apiKey:(NSString * _Nonnull)apiKey queueCode:(NSString * _Nonnull)queueCode mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone productName:(NSString * _Nullable)productName language:(NSString * _Nullable)language SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param apiKey Your company’s Assistbox Api Key
///
/// \param queueCode The queueCode of the queue that the user will join
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param firstName First name of the client
///
/// \param lastName Last name of the client
///
/// \param email E-mail of the client
///
/// \param phone Phone number of the client
///
/// \param productName will be visible by agent
///
/// \param language preferred language that will be used by Assistbox, Will use device language if null
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsClientWithApiKeyWithViewController:(UIViewController * _Nonnull)viewController apiKey:(NSString * _Nonnull)apiKey queueCode:(NSString * _Nonnull)queueCode mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone productName:(NSString * _Nullable)productName language:(NSString * _Nullable)language splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param apiKey Your company’s Assistbox Api Key
///
/// \param queueCode The queueCode of the queue that the user will join
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param firstName First name of the client
///
/// \param lastName Last name of the client
///
/// \param email E-mail of the client
///
/// \param phone Phone number of the client
///
/// \param productName will be visible by agent
///
/// \param language preferred language that will be used by Assistbox, Will use device language if null
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsClientWithApiKeyWithViewController:(UIViewController * _Nonnull)viewController apiKey:(NSString * _Nonnull)apiKey queueCode:(NSString * _Nonnull)queueCode mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone productName:(NSString * _Nullable)productName language:(NSString * _Nullable)language splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token The token you received using your company’s api key
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
- (void)initC2CModuleAsClientWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token The token you received using your company’s api key
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsClientWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token The token you received using your company’s api key
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsClientWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
- (void)closeAssistboxViewControllerWithViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(void))completion;
@end


SWIFT_PROTOCOL("_TtP12AssistboxLib17AssistboxDelegate_")
@protocol AssistboxDelegate
- (void)AssistboxViewWillDisappearWithAnimated:(BOOL)animated;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC12AssistboxLib23AssistboxViewController")
@interface AssistboxViewController : UIViewController
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable accessKey;
@property (nonatomic, copy) NSString * _Nullable mobileServiceEndpoint;
@property (nonatomic) BOOL isNotificationBased;
@property (nonatomic) BOOL hasNavigationStack;
@property (nonatomic) BOOL redirectToMainApplication;
@property (nonatomic, copy) NSString * _Nullable splashScreenResourceName;
@property (nonatomic, copy) NSString * _Nullable voipNotificationToken;
@property (nonatomic, copy) NSString * _Nullable useModule;
@property (nonatomic, copy) NSString * _Nullable apiKey;
@property (nonatomic, copy) NSString * _Nullable queueCode;
@property (nonatomic) BOOL showContactForm;
@property (nonatomic, copy) NSString * _Nullable productName;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable regularNotificationToken;
@property (nonatomic) BOOL checkForApplicationUpdate;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12AssistboxLib17BuildConfigHelper")
@interface BuildConfigHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VERSION_NAME;)
+ (NSString * _Nonnull)VERSION_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AST_SHORT_VERSION_NAME;)
+ (NSString * _Nonnull)AST_SHORT_VERSION_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib10DeviceUtil")
@interface DeviceUtil : NSObject
+ (NSString * _Nonnull)getDeviceId SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceIdWithDeviceId:(NSString * _Nonnull)deviceId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HttpRequestMethodEnum, closed) {
  HttpRequestMethodEnumGET = 0,
  HttpRequestMethodEnumPOST = 1,
  HttpRequestMethodEnumPUT = 2,
};

@class NSData;

SWIFT_CLASS("_TtC12AssistboxLib15HttpRequestUtil")
@interface HttpRequestUtil : NSObject
+ (void)sendRequestWithoutCompletionWithMethod:(enum HttpRequestMethodEnum)method path:(NSString * _Nonnull)path headers:(NSDictionary * _Nonnull)headers data:(NSData * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib10LogService")
@interface LogService : NSObject
+ (void)setLogParametersWithAccessToken:(NSString * _Nonnull)accessToken servicePath:(NSString * _Nonnull)servicePath appointmentId:(NSInteger)appointmentId participantId:(NSInteger)participantId;
+ (void)setLogLevelWithLevel:(NSInteger)level;
+ (void)setAppointmentIdWithAppointmentId:(NSInteger)appointmentId;
+ (void)setParticipantIdWithParticipantId:(NSInteger)participantId;
+ (void)traceWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)debugWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)infoWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)warningWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)errorWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)errorWithClazz:(NSString * _Nonnull)clazz error:(NSError * _Nonnull)error;
+ (void)errorWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text error:(NSError * _Nonnull)error;
+ (void)criticalWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LogSeverityEnum, closed) {
  LogSeverityEnumCRITICAL = 1,
  LogSeverityEnumERROR = 2,
  LogSeverityEnumWARN = 3,
  LogSeverityEnumINFO = 4,
  LogSeverityEnumDEBUG = 5,
  LogSeverityEnumTRACE = 6,
};


SWIFT_CLASS("_TtC12AssistboxLib30NotificationDeviceTokenService")
@interface NotificationDeviceTokenService : NSObject
+ (void)createNotificationDeviceTokenWithToken:(NSString * _Nonnull)token serviceEndpoint:(NSString * _Nonnull)serviceEndpoint regularNotificationToken:(NSString * _Nonnull)regularNotificationToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib11ServicePath")
@interface ServicePath : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ServicePath * _Nonnull shared;)
+ (ServicePath * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)setServicePathWithPath:(NSString * _Nullable)path;
- (NSString * _Nullable)getServicePath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib12TokenService")
@interface TokenService : NSObject
+ (void)getTokenWithApiKey:(NSString * _Nonnull)apiKey serviceEndpoint:(NSString * _Nonnull)serviceEndpoint completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
+ (void)getTokenWithApiKey:(NSString * _Nonnull)apiKey extraData:(NSDictionary * _Nonnull)extraData serviceEndpoint:(NSString * _Nonnull)serviceEndpoint completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
+ (void)getDataFromJwtTokenWithToken:(NSString * _Nonnull)token serviceEndpoint:(NSString * _Nonnull)serviceEndpoint completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum UsageModuleEnum : NSInteger;

SWIFT_CLASS("_TtC12AssistboxLib12TokenStorage")
@interface TokenStorage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TokenStorage * _Nonnull shared;)
+ (TokenStorage * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)storeWithToken:(NSString * _Nullable)token;
- (void)storeWithToken:(NSString * _Nonnull)token useModule:(enum UsageModuleEnum)useModule;
- (NSString * _Nullable)retrieve SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)retrieveWithUseModule:(enum UsageModuleEnum)useModule SWIFT_WARN_UNUSED_RESULT;
- (void)clear;
- (void)clearWithUseModule:(enum UsageModuleEnum)useModule;
- (void)storeClientTokenWithToken:(NSString * _Nullable)token;
- (void)storeC2CAuthTokenWithToken:(NSString * _Nullable)token;
- (NSString * _Nullable)retrieveClientToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)retrieveC2CAuthToken SWIFT_WARN_UNUSED_RESULT;
- (void)clearClientToken;
- (void)clearC2CAuthToken;
- (NSDictionary<NSString *, id> * _Nullable)decodeTokenWithToken:(NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, UsageModuleEnum, closed) {
  UsageModuleEnumVIDEO_CALL = 0,
  UsageModuleEnumC2C_AGENT = 1,
  UsageModuleEnumC2C_CLIENT = 2,
};


SWIFT_CLASS("_TtC12AssistboxLib29UsagePolicyInfoViewController")
@interface UsagePolicyInfoViewController : UIViewController
- (void)instantiateWithToken:(NSString * _Nonnull)token serviceEndpoint:(NSString * _Nonnull)serviceEndpoint languageValue:(NSString * _Nonnull)languageValue deviceId:(NSString * _Nonnull)deviceId completion:(void (^ _Nonnull)(UsagePolicyInfoViewController * _Nullable))completion;
- (void)setApproveActionWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setDenyActionWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef ASSISTBOXLIB_SWIFT_H
#define ASSISTBOXLIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CallKit;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AssistboxLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class CXCallUpdate;
@class CXProvider;
@class NSUUID;

SWIFT_CLASS("_TtC12AssistboxLib14ASTCallKitUtil")
@interface ASTCallKitUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTCallKitUtil * _Nonnull shared;)
+ (ASTCallKitUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (CXCallUpdate * _Nonnull)initCXCallUpdateFromInfo:(NSString * _Nonnull)fromInfo SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (CXProvider * _Nonnull)initCXProviderWithIconName:(NSString * _Nullable)iconName SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (void)closeCallKitOnInitializeWithCxProvider:(CXProvider * _Nonnull)cxProvider callUUID:(NSUUID * _Nonnull)callUUID;
- (void)closeCallKit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AssistboxLib23ASTIncomingCallDelegate_")
@protocol ASTIncomingCallDelegate
- (void)endCallWithUuid:(NSUUID * _Nonnull)uuid reason:(CXCallEndedReason)reason;
@optional
- (void)initASTVideoCallWithAccessToken:(NSString * _Nonnull)accessToken mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint callUUID:(NSUUID * _Nonnull)callUUID SWIFT_METHOD_FAMILY(none);
- (void)initASTC2CAgentWithCallUUID:(NSUUID * _Nonnull)callUUID SWIFT_METHOD_FAMILY(none);
@required
- (void)assistboxSdkVersionNotSupportedWithCallUUID:(NSUUID * _Nonnull)callUUID;
@end

@class PKPushPayload;
@class NSNumber;

SWIFT_CLASS("_TtC12AssistboxLib22ASTIncomingCallHandler")
@interface ASTIncomingCallHandler : NSObject
/// pass the whole payload object and let Assistbox SDK parse the notification payload
- (NSDictionary<NSString *, id> * _Nullable)receivedVoIPNotificationWithPayload:(PKPushPayload * _Nonnull)payload checkForVersionSupport:(BOOL)checkForVersionSupport SWIFT_WARN_UNUSED_RESULT;
/// If the main application wants to parse the payload, it may call this method
- (NSDictionary<NSString *, id> * _Nonnull)receivedCallToParticipantWithAccessToken:(NSString * _Nonnull)accessToken mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint signalServerUrl:(NSString * _Nonnull)signalServerUrl fromInfo:(NSString * _Nonnull)fromInfo callEventId:(NSString * _Nullable)callEventId callerUUID:(NSString * _Nullable)callerUUID logLevel:(NSNumber * _Nullable)logLevel checkForVersionSupport:(BOOL)checkForVersionSupport SWIFT_WARN_UNUSED_RESULT;
/// If the main application wants to parse the payload, it may call this method
- (NSDictionary<NSString *, id> * _Nullable)receivedCallFromQueueWithQueueId:(NSInteger)queueId fromInfo:(NSString * _Nonnull)fromInfo signalServerUrl:(NSString * _Nonnull)signalServerUrl logLevel:(NSNumber * _Nullable)logLevel checkForVersionSupport:(BOOL)checkForVersionSupport SWIFT_WARN_UNUSED_RESULT;
- (void)answerCallWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)sendVersionNotSupportedSignalWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)rejectCallWithCompletion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib19ASTLaunchParameters")
@interface ASTLaunchParameters : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTLaunchParameters * _Nonnull shared;)
+ (ASTLaunchParameters * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic, copy) NSString * _Nonnull accessKey;
@property (nonatomic, copy) NSString * _Nonnull mobileServiceEndpoint;
@property (nonatomic) BOOL isNotificationBased;
@property (nonatomic) BOOL hasNavigationStack;
@property (nonatomic) BOOL isMainAppNavigationBarHidden;
@property (nonatomic) BOOL redirectToMainApplication;
@property (nonatomic, copy) NSString * _Nonnull splashScreenResourceName;
@property (nonatomic, copy) NSString * _Nonnull voipNotificationToken;
@property (nonatomic, copy) NSString * _Nonnull useModule;
@property (nonatomic, copy) NSString * _Nonnull apiKey;
@property (nonatomic, copy) NSString * _Nonnull queueCode;
@property (nonatomic) BOOL showContactForm;
@property (nonatomic, copy) NSString * _Nonnull productName;
@property (nonatomic, copy) NSString * _Nonnull language;
@property (nonatomic, copy) NSString * _Nonnull firstName;
@property (nonatomic, copy) NSString * _Nonnull lastName;
@property (nonatomic, copy) NSString * _Nonnull email;
@property (nonatomic, copy) NSString * _Nonnull phone;
@property (nonatomic, copy) NSString * _Nonnull regularNotificationToken;
- (NSString * _Nullable)getLaunchParameterWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib22ASTNotificationManager")
@interface ASTNotificationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTNotificationManager * _Nonnull shared;)
+ (ASTNotificationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)createOngoingCallNotificationWithText:(NSString * _Nonnull)text;
- (void)removeOngoingCallNotification;
- (void)createCallKitNotificationWithText:(NSString * _Nonnull)text;
- (void)removeCallKitNotification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib13ASTStringUtil")
@interface ASTStringUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTStringUtil * _Nonnull shared;)
+ (ASTStringUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)localizedStringWithKey:(NSString * _Nonnull)key comment:(NSString * _Nonnull)comment SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRandomAlphaNumericWithLength:(NSInteger)length SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib16ASTUpdateManager")
@interface ASTUpdateManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib19ASTUserDefaultsUtil")
@interface ASTUserDefaultsUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASTUserDefaultsUtil * _Nonnull shared;)
+ (ASTUserDefaultsUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AssistboxLib21AssistboxViewDelegate_")
@protocol AssistboxViewDelegate
- (void)AssistboxViewWillDisappearWithAnimated:(BOOL)animated;
@end

@class UIViewController;

SWIFT_CLASS("_TtC12AssistboxLib9Assistbox")
@interface Assistbox : NSObject <AssistboxViewDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Assistbox * _Nonnull shared;)
+ (Assistbox * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)AssistboxViewWillDisappearWithAnimated:(BOOL)animated;
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
/// APNS VoIP Notification token that will be used to send notifications to the user
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=4.4.0);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
- (void)initVideoCallWithTokenInternalWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName isNotificationBased:(BOOL)isNotificationBased regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=4.4.0);
/// \param viewController will be used to start AssistboxViewController
///
/// \param accessKey will be used to start the video call
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initVideoCallWithAccessKeyWithViewController:(UIViewController * _Nonnull)viewController accessKey:(NSString * _Nonnull)accessKey mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none) SWIFT_AVAILABILITY(ios,deprecated=4.4.0);
/// \param viewController will be used to start AssistboxViewController
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param voipNotificationToken APNS VoIP Notification token that will be used to send notifications to the user
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsAgentWithViewController:(UIViewController * _Nonnull)viewController mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint voipNotificationToken:(NSString * _Nonnull)voipNotificationToken splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName regularNotificationToken:(NSString * _Nullable)regularNotificationToken redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param apiKey Your company’s Assistbox Api Key
///
/// \param queueCode The queueCode of the queue that the user will join
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param firstName First name of the client
///
/// \param lastName Last name of the client
///
/// \param email E-mail of the client
///
/// \param phone Phone number of the client
///
/// \param productName will be visible by agent
///
/// \param language preferred language that will be used by Assistbox, Will use device language if null
///
- (void)initC2CModuleAsClientWithApiKeyWithViewController:(UIViewController * _Nonnull)viewController apiKey:(NSString * _Nonnull)apiKey queueCode:(NSString * _Nonnull)queueCode mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone productName:(NSString * _Nullable)productName language:(NSString * _Nullable)language SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param apiKey Your company’s Assistbox Api Key
///
/// \param queueCode The queueCode of the queue that the user will join
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param firstName First name of the client
///
/// \param lastName Last name of the client
///
/// \param email E-mail of the client
///
/// \param phone Phone number of the client
///
/// \param productName will be visible by agent
///
/// \param language preferred language that will be used by Assistbox, Will use device language if null
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsClientWithApiKeyWithViewController:(UIViewController * _Nonnull)viewController apiKey:(NSString * _Nonnull)apiKey queueCode:(NSString * _Nonnull)queueCode mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone productName:(NSString * _Nullable)productName language:(NSString * _Nullable)language splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param apiKey Your company’s Assistbox Api Key
///
/// \param queueCode The queueCode of the queue that the user will join
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param firstName First name of the client
///
/// \param lastName Last name of the client
///
/// \param email E-mail of the client
///
/// \param phone Phone number of the client
///
/// \param productName will be visible by agent
///
/// \param language preferred language that will be used by Assistbox, Will use device language if null
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsClientWithApiKeyWithViewController:(UIViewController * _Nonnull)viewController apiKey:(NSString * _Nonnull)apiKey queueCode:(NSString * _Nonnull)queueCode mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName email:(NSString * _Nullable)email phone:(NSString * _Nullable)phone productName:(NSString * _Nullable)productName language:(NSString * _Nullable)language splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token The token you received using your company’s api key
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
- (void)initC2CModuleAsClientWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token The token you received using your company’s api key
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
- (void)initC2CModuleAsClientWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName SWIFT_METHOD_FAMILY(none);
/// \param viewController will be used to start AssistboxViewController
///
/// \param token The token you received using your company’s api key
///
/// \param mobileServiceEndpoint determines the base URL for the API calls
///
/// \param splashScreenResourceName name of the image that will be shown while opening Assistbox SDK
///
/// \param redirectToMainApplication whether to return to the main application after all the actions within Assistbox SDK is done
///
- (void)initC2CModuleAsClientWithTokenWithViewController:(UIViewController * _Nonnull)viewController token:(NSString * _Nonnull)token mobileServiceEndpoint:(NSString * _Nonnull)mobileServiceEndpoint splashScreenResourceName:(NSString * _Nullable)splashScreenResourceName redirectToMainApplication:(BOOL)redirectToMainApplication SWIFT_METHOD_FAMILY(none);
- (void)closeAssistboxViewControllerWithViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(void))completion;
@end


SWIFT_PROTOCOL("_TtP12AssistboxLib17AssistboxDelegate_")
@protocol AssistboxDelegate
- (void)AssistboxViewWillDisappearWithAnimated:(BOOL)animated;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC12AssistboxLib23AssistboxViewController")
@interface AssistboxViewController : UIViewController
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable accessKey;
@property (nonatomic, copy) NSString * _Nullable mobileServiceEndpoint;
@property (nonatomic) BOOL isNotificationBased;
@property (nonatomic) BOOL hasNavigationStack;
@property (nonatomic) BOOL redirectToMainApplication;
@property (nonatomic, copy) NSString * _Nullable splashScreenResourceName;
@property (nonatomic, copy) NSString * _Nullable voipNotificationToken;
@property (nonatomic, copy) NSString * _Nullable useModule;
@property (nonatomic, copy) NSString * _Nullable apiKey;
@property (nonatomic, copy) NSString * _Nullable queueCode;
@property (nonatomic) BOOL showContactForm;
@property (nonatomic, copy) NSString * _Nullable productName;
@property (nonatomic, copy) NSString * _Nullable language;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable regularNotificationToken;
@property (nonatomic) BOOL checkForApplicationUpdate;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12AssistboxLib17BuildConfigHelper")
@interface BuildConfigHelper : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VERSION_NAME;)
+ (NSString * _Nonnull)VERSION_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AST_SHORT_VERSION_NAME;)
+ (NSString * _Nonnull)AST_SHORT_VERSION_NAME SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib10DeviceUtil")
@interface DeviceUtil : NSObject
+ (NSString * _Nonnull)getDeviceId SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceIdWithDeviceId:(NSString * _Nonnull)deviceId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HttpRequestMethodEnum, closed) {
  HttpRequestMethodEnumGET = 0,
  HttpRequestMethodEnumPOST = 1,
  HttpRequestMethodEnumPUT = 2,
};

@class NSData;

SWIFT_CLASS("_TtC12AssistboxLib15HttpRequestUtil")
@interface HttpRequestUtil : NSObject
+ (void)sendRequestWithoutCompletionWithMethod:(enum HttpRequestMethodEnum)method path:(NSString * _Nonnull)path headers:(NSDictionary * _Nonnull)headers data:(NSData * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib10LogService")
@interface LogService : NSObject
+ (void)setLogParametersWithAccessToken:(NSString * _Nonnull)accessToken servicePath:(NSString * _Nonnull)servicePath appointmentId:(NSInteger)appointmentId participantId:(NSInteger)participantId;
+ (void)setLogLevelWithLevel:(NSInteger)level;
+ (void)setAppointmentIdWithAppointmentId:(NSInteger)appointmentId;
+ (void)setParticipantIdWithParticipantId:(NSInteger)participantId;
+ (void)traceWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)debugWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)infoWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)warningWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)errorWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
+ (void)errorWithClazz:(NSString * _Nonnull)clazz error:(NSError * _Nonnull)error;
+ (void)errorWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text error:(NSError * _Nonnull)error;
+ (void)criticalWithClazz:(NSString * _Nonnull)clazz text:(NSString * _Nonnull)text;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LogSeverityEnum, closed) {
  LogSeverityEnumCRITICAL = 1,
  LogSeverityEnumERROR = 2,
  LogSeverityEnumWARN = 3,
  LogSeverityEnumINFO = 4,
  LogSeverityEnumDEBUG = 5,
  LogSeverityEnumTRACE = 6,
};


SWIFT_CLASS("_TtC12AssistboxLib30NotificationDeviceTokenService")
@interface NotificationDeviceTokenService : NSObject
+ (void)createNotificationDeviceTokenWithToken:(NSString * _Nonnull)token serviceEndpoint:(NSString * _Nonnull)serviceEndpoint regularNotificationToken:(NSString * _Nonnull)regularNotificationToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib11ServicePath")
@interface ServicePath : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ServicePath * _Nonnull shared;)
+ (ServicePath * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)setServicePathWithPath:(NSString * _Nullable)path;
- (NSString * _Nullable)getServicePath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AssistboxLib12TokenService")
@interface TokenService : NSObject
+ (void)getTokenWithApiKey:(NSString * _Nonnull)apiKey serviceEndpoint:(NSString * _Nonnull)serviceEndpoint completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
+ (void)getTokenWithApiKey:(NSString * _Nonnull)apiKey extraData:(NSDictionary * _Nonnull)extraData serviceEndpoint:(NSString * _Nonnull)serviceEndpoint completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
+ (void)getDataFromJwtTokenWithToken:(NSString * _Nonnull)token serviceEndpoint:(NSString * _Nonnull)serviceEndpoint completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum UsageModuleEnum : NSInteger;

SWIFT_CLASS("_TtC12AssistboxLib12TokenStorage")
@interface TokenStorage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TokenStorage * _Nonnull shared;)
+ (TokenStorage * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)storeWithToken:(NSString * _Nullable)token;
- (void)storeWithToken:(NSString * _Nonnull)token useModule:(enum UsageModuleEnum)useModule;
- (NSString * _Nullable)retrieve SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)retrieveWithUseModule:(enum UsageModuleEnum)useModule SWIFT_WARN_UNUSED_RESULT;
- (void)clear;
- (void)clearWithUseModule:(enum UsageModuleEnum)useModule;
- (void)storeClientTokenWithToken:(NSString * _Nullable)token;
- (void)storeC2CAuthTokenWithToken:(NSString * _Nullable)token;
- (NSString * _Nullable)retrieveClientToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)retrieveC2CAuthToken SWIFT_WARN_UNUSED_RESULT;
- (void)clearClientToken;
- (void)clearC2CAuthToken;
- (NSDictionary<NSString *, id> * _Nullable)decodeTokenWithToken:(NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, UsageModuleEnum, closed) {
  UsageModuleEnumVIDEO_CALL = 0,
  UsageModuleEnumC2C_AGENT = 1,
  UsageModuleEnumC2C_CLIENT = 2,
};


SWIFT_CLASS("_TtC12AssistboxLib29UsagePolicyInfoViewController")
@interface UsagePolicyInfoViewController : UIViewController
- (void)instantiateWithToken:(NSString * _Nonnull)token serviceEndpoint:(NSString * _Nonnull)serviceEndpoint languageValue:(NSString * _Nonnull)languageValue deviceId:(NSString * _Nonnull)deviceId completion:(void (^ _Nonnull)(UsagePolicyInfoViewController * _Nullable))completion;
- (void)setApproveActionWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setDenyActionWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
